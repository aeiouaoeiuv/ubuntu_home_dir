# version checking
run 'tmux setenv -g TMUX_VERSION $(tmux -V | sed -En "s/^tmux[^0-9]*([.0-9]+).*/\1/p")'
if '[ "$(echo "$TMUX_VERSION < 3.2" | bc)" = 1 ]' {
    display 'tmux version < 3.2'
}

# environment setup
run "tmux setenv -g TMUX_SSH_IP $(echo $SSH_CONNECTION | awk \'{print $3}\')"

# remap prefix command
unbind-key C-b
set -g prefix M-q # alt+q

# navigate panes with hjkl
bind-key -N "[prefix+h] Select left pane"  -r h select-pane -L
bind-key -N "[prefix+j] Select down pane"  -r j select-pane -D
bind-key -N "[prefix+k] Select up pane"    -r k select-pane -U
bind-key -N "[prefix+l] Select right pane" -r l select-pane -R
bind-key -N "[alt+shift+h] Select left pane"  -n M-H select-pane -L
bind-key -N "[alt+shift+j] Select down pane"  -n M-J select-pane -D
bind-key -N "[alt+shift+k] Select up pane"    -n M-K select-pane -U
bind-key -N "[alt+shift+l] Select right pane" -n M-L select-pane -R

# navigate window
bind-key -N "[prefix+p] Select previous window" -r p previous-window
bind-key -N "[prefix+n] Select next window"     -r n next-window

# navigate window without prefix
bind-key -N "[alt+shift+p] Select previous window" -n M-P previous-window
bind-key -N "[alt+shift+n] Select next window"     -n M-N next-window
bind-key -N "[alt+shift+1] Select window 1"        -n M-! select-window -t 1
bind-key -N "[alt+shift+2] Select window 2"        -n M-@ select-window -t 2
bind-key -N "[alt+shift+3] Select window 3"        -n M-# select-window -t 3
bind-key -N "[alt+shift+4] Select window 4"        -n M-$ select-window -t 4
bind-key -N "[alt+shift+5] Select window 5"        -n M-% select-window -t 5
bind-key -N "[alt+shift+6] Select window 6"        -n M-^ select-window -t 6
bind-key -N "[alt+shift+7] Select window 7"        -n M-& select-window -t 7
bind-key -N "[alt+shift+8] Select window 8"        -n M-* select-window -t 8
bind-key -N "[alt+shift+9] Select window 9"        -n M-( select-window -t 9

# resize pane
bind-key -N "[prefix+shift+h] Resize pane to left"  -r H resize-pane -L 2
bind-key -N "[prefix+shift+j] Resize pane to down"  -r J resize-pane -D 2
bind-key -N "[prefix+shift+k] Resize pane to up"    -r K resize-pane -U 2
bind-key -N "[prefix+shift+l] Resize pane to right" -r L resize-pane -R 2

# split window with '|' & '-'
unbind-key '%'
bind-key -N "[prefix+shift+\] Split vertical pane" | split-window -h -c "#{pane_current_path}"
unbind-key '"'
bind-key -N "[prefix+shift+-] Split horizontal pane" - split-window -v -c "#{pane_current_path}"
unbind-key 'c'
bind-key -N "[prefix+c] Create window" c new-window -c "#{pane_current_path}"
bind-key -N "[prefix+shift+c] Create window on background" C new-window -c "#{pane_current_path}" -d
unbind-key '['
bind-key -N "[prefix+u] Enter copy mode" u copy-mode
unbind-key ']'
bind-key -N "[prefix+v] Paste tmux's buffer" -T prefix v run "xclip -o | tmux load-buffer - && tmux paste-buffer"

# copy mode like vim, old version of tmux unsupport these commands
bind-key -N "[copy_mode: v] Begin selection" -T copy-mode-vi 'v' send-keys -X begin-selection

bind-key -N "[copy_mode: y] Copy" -T copy-mode-vi 'y' \
    send-keys -X copy-pipe "xclip -i -f -selection primary | xclip -i -selection clipboard" \; \
    send-keys -X clear-selection

bind-key -N "[copy_mode: p] Copy and paste, then exit" -T copy-mode-vi 'p' \
    send-keys -X copy-pipe "xclip -i -f -selection primary | xclip -i -selection clipboard" \; \
    run "xclip -o | tmux load-buffer - && tmux paste-buffer" \; \
    send-keys -X cancel

bind-key -N "[copy_mode: P] Copy and paste, no exit" -T copy-mode-vi 'P' \
    send-keys -X copy-pipe "xclip -i -f -selection primary | xclip -i -selection clipboard" \; \
    run "xclip -o | tmux load-buffer - && tmux paste-buffer" \; \
    run "sleep 0.5" \; \
    send-keys -X refresh-from-pane

bind-key -N "[copy_mode: x] Clear selection" -T copy-mode-vi 'x' send-keys -X clear-selection

# closing pane, and closing popup if there is only one pane left
bind-key -N "[prefix+x] Close pane" -T prefix x run " \
    if [ \"$(tmux display-message -p -F \"#{session_name}\")\" != \"popup\" ] \
        && [ \"$(tmux list-sessions | grep -c \"popup\")\" = \"1\" ] \
        && [ \"$(tmux list-windows | wc -l)\" = \"1\" ] \
        && [ \"$(tmux list-panes | wc -l)\" = \"1\" ]; \
    then \
        tmux kill-session -t popup; \
    fi; \
    tmux kill-pane -t '#{pane_index}'"

# closing window,, and closing popup if there is only one window left
unbind-key '&'
bind-key -N "[prefix+shift+x] Close window" -T prefix X run " \
    if [ \"$(tmux display-message -p -F \"#{session_name}\")\" != \"popup\" ] \
        && [ \"$(tmux list-sessions | grep -c \"popup\")\" = \"1\" ] \
        && [ \"$(tmux list-windows | wc -l)\" = \"1\" ]; \
    then \
        tmux kill-session -t popup; \
    fi; \
    tmux kill-window -t '#{window_index}'"

# layout switch
bind-key -N "[prefix+space] Layout switch between even-horizontal and even-vertical" -T prefix space run " \
    if [ \"#{TMUX_LAYOUT}\" = \"even-horizontal\" ]; then \
        tmux select-layout -t '#{window_index}' even-vertical; \
        tmux setenv -g TMUX_LAYOUT even-vertical; \
    else \
        tmux select-layout -t '#{window_index}' even-horizontal; \
        tmux setenv -g TMUX_LAYOUT even-horizontal; \
    fi"

# respawn current pane/window
unbind-key 'r'
bind-key -N "[prefix+r] Respawn pane" r respawn-pane -k -c "#{pane_current_path}" \; clear-history
bind-key -N "[prefix+shift+r] Respawn window" R respawn-window -k -c "#{pane_current_path}" \; clear-history

bind-key -N "[prefix+ctrl+l] Clear history" C-l send-keys -R \; clear-history \; send-keys C-l
bind-key -N "[prefix+shift+,] Swap left window" < swap-window -t -1
bind-key -N "[prefix+shift+.] Swap right window" > swap-window -t +1
bind-key -N "[prefix+tab] Select last window" Tab last-window
bind-key -N "[prefix+m] Toggle popup window" -T prefix m run " \
    if [ \"$(tmux display-message -p -F \"#{session_name}\")\" = \"popup\"  ]; then \
        tmux detach-client; \
    else \
        tmux popup -d '#{pane_current_path}' -w 96% -h 92% -E \"tmux attach -t popup || tmux new -s popup\"; \
    fi"

set -g status-justify left
set -g status-position top
set -g status-left "#{?TMUX_SSH_IP,#[fg=#f1d6be#,bg=#36ac9d] :#{TMUX_SSH_IP} #[fg=#36ac9d#,bg=#3b8bb9],}#[fg=#e1d6d1,bg=#3b8bb9] 况:#S 者:#I/#{session_windows} 﩯:#P/#{window_panes} #{?client_prefix,#[fg=#3b8bb9#,bg=#99e995] #[fg=#2c467f] #[fg=#99e995#,bg=default],#[fg=#3b8bb9#,bg=default]}"
set -g status-left-length 0
set -g window-status-current-format "#[fg=#e1e4a2,bg=default,reverse]#[fg=#316d88,bg=#e1e4a2,noreverse,bold]#{?window_zoomed_flag, #[bold]缾 ZOOM, #{window_index}}  #{window_name} #[fg=#e1e4a2,bg=default]"
set -g window-status-format "#[fg=#974274,bg=default,reverse]#{?window_last_flag,#[bold],}#[fg=#f6da40,bg=#974274,noreverse] #{window_index} #{window_name}#{?window_activity_flag,*,} #[fg=#974274,bg=default]"
set -g window-status-separator ""
set -g window-status-activity-style ""
set -g status-right ""
set -g status-style bg=default
set -g pane-active-border-style fg=#ecd61c
set -g pane-border-style fg=#508090
set -g mode-style fg=#f9fbe7,bg=#ad1457

set -g default-terminal "screen-256color"
set -g terminal-overrides ",*256col*:Tc,xterm-256color:clipboard" # support true color
set -g base-index 1
set -g pane-base-index 1
set -g renumber-windows on
set -g wrap-search off
set -g display-time 3000
set -g display-panes-time 5000
set -g monitor-activity on
set -g visual-activity off
set -g status-keys vi # Use vi key bindings in status line for command prompt
set -g status-interval 0
set -g monitor-silence 0
set -g mouse off
set -g history-limit 10000
set -g repeat-time 1500
set -gw mode-keys vi
set -gw allow-rename on
set -gw automatic-rename on
set -s escape-time 0
set -s set-clipboard external

